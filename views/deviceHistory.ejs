<%- include('header.ejs') %>
  <style>
    .disabledbutton {
    pointer-events: none;
    opacity: 0.4;
}
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
  <div class="container">
    <div class="row justify-content-center" >
      <div class="col-xl-6 " id="auto">
        <h1 class="mt-4">Pressure History</h1>
        <div class="card mb-4">
          <div class="card-header" >
          </div>
          <div class="card-body">
            <canvas id="automaticChart" style="width:100%;max-width:700px"></canvas>
          </div>
        </div>
      </div>
      <div class="col-xl-6 " id="manual">
        <h1 class="mt-4">Fan Speed History</h1>
        <div class="card mb-4">
          <div class="card-header">
          </div>
          <div class="card-body">
            <canvas id="manualChart" style="width:100%;max-width:700px"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script crossorigin="anonymous"
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="js/scripts.js"></script>
  <script crossorigin="anonymous" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"></script>

  <script crossorigin="anonymous" src="https://cdn.jsdelivr.net/npm/simple-datatables@latest"></script>
  <script src="js/datatables-simple-demo.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.js">
  </script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-gauge@0.3.0/dist/chartjs-gauge.min.js"></script>

  <script>
    var mqttData = '<%- JSON.stringify(mqttData) %>';
    var mqttDataObject = JSON.parse(mqttData);
    console.log(mqttDataObject);
    var dateValues = [];
    var automaticData = [];
    var manualData = [];

    //for (let mqtt of mqttDataObject) {
    for (var i = 0 ;i<30;i++) {
      dateValues.push(mqttDataObject[i].date);
      automaticData.push(mqttDataObject[i].pressure);
      manualData.push(mqttDataObject[i].speed);
    }

    new Chart("automaticChart", {
      type: "line",
      data: {
        labels: dateValues,
        datasets: [{
          data: automaticData,
          borderColor: "red",
          fill: false
        }]
      },
      options: {
        legend: { display: false }
      }
    });

    new Chart("manualChart", {
      type: "line",
      data: {
        labels: dateValues,
        datasets: [{
          data: manualData,
          borderColor: "red",
          fill: false
        }]
      },
      options: {
        legend: { display: false }
      }
    });
    // var ctxSpeed = document.getElementById("speedChart").getContext("2d");
    // var chartSpeed = new Chart(ctxSpeed, {
    //   type: 'gauge',
    //   data: {
    //     datasets: [{
    //       value: 89,
    //       minValue: 0,
    //       data: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
    //       backgroundColor: ['green', 'green', 'green', 'green', 'green', 'orange', 'orange', 'orange', 'red', 'red'],
    //     }]
    //   },
    //   options: {
    //     needle: {
    //       radiusPercentage: 2,
    //       widthPercentage: 3.2,
    //       lengthPercentage: 80,
    //       color: 'rgba(0, 0, 0, 1)'
    //     },
    //     valueLabel: {
    //       display: true,
    //       formatter: (value) => {
    //         return Math.round(value) + " %";
    //       },
    //       color: 'rgba(255, 255, 255, 1)',
    //       backgroundColor: 'rgba(0, 0, 0, 1)',
    //       borderRadius: 5,
    //       padding: {
    //         top: 10,
    //         bottom: 10
    //       }
    //     }
    //   }
    // });


    // var ctxPressure = document.getElementById("pressureChart").getContext("2d");
    // var pressureChart = new Chart(ctxPressure, {
    //   type: 'gauge',
    //   data: {
    //     datasets: [{
    //       value: 75,
    //       minValue: 0,
    //       data: [20, 40, 60, 80, 100, 120, 140],
    //       backgroundColor: ['green', 'green', 'green', 'green', 'orange', 'orange', "red", "red"],
    //     }]
    //   },
    //   options: {
    //     needle: {
    //       radiusPercentage: 2,
    //       widthPercentage: 3.2,
    //       lengthPercentage: 80,
    //       color: 'rgba(0, 0, 0, 1)'
    //     },
    //     valueLabel: {
    //       display: true,
    //       formatter: (value) => {
    //         return Math.round(value) + " Pa";
    //       },
    //       color: 'rgba(255, 255, 255, 1)',
    //       backgroundColor: 'rgba(0, 0, 0, 1)',
    //       borderRadius: 5,
    //       padding: {
    //         top: 10,
    //         bottom: 10
    //       }
    //     }
    //   }
    // });

//     chartSpeed.data.datasets[0].value = 35;

//     function toggle() {
//       var label = document.getElementById("toggleButton").innerText;
//       if (label === 'Automatic') {
//         document.getElementById("toggleButton").innerText = "Manuel";
//         document.getElementById("unitLabel").innerText = "Speed (%)";
//       }
//       else {
//         document.getElementById("toggleButton").innerText = "Automatic";
//         document.getElementById("unitLabel").innerText = "Pressure (Pa)";
//       }
//     }
//   let socket = new WebSocket("ws://localhost:3002");

// socket.onopen = function(e) {
//   alert("[open] Connection established");
//   alert("Sending to server");
//   socket.send("My name is John");
// };

// socket.onmessage = function(event) {
//   chartSpeed.data.datasets[0].value = parseInt(event.data);
//   console.log(event.data);
// };

// socket.onclose = function(event) {
//   if (event.wasClean) {
//     alert(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);
//   } else {
//     // e.g. server process killed or network down
//     // event.code is usually 1006 in this case
//     alert('[close] Connection died');
//   }
// };

// socket.onerror = function(error) {
//   alert(`[error] ${error.message}`);
// };
  </script>
  <%- include('footer.ejs') %>